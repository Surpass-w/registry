apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "registry.fullname" . }}
  labels:
    {{- include "registry.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "registry.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "registry.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: htpasswd
          image: "{{ .Values.initContainer.repository }}:{{ .Values.initContainer.tag }}"
          imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
          command:
            [
              "/usr/local/bin/htpasswd",
              "-u",
              "{{ .Values.initContainer.username }}",
              "-p",
              "{{ .Values.initContainer.password }}",
              "-f",
              "/data/htpasswd"
            ]
          volumeMounts:
            - mountPath: /data
              name: reg-auth
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: REGISTRY_HTTP_ADDR
              value: "0.0.0.0:5000"
            - name: REGISTRY_AUTH
              value: "htpasswd"
            - name: REGISTRY_AUTH_HTPASSWD_PATH
              value: "/auth/htpasswd"
            - name: REGISTRY_AUTH_HTPASSWD_REALM
              value: "Registry Realm"
          volumeMounts:
            - name: reg-data
              mountPath: /var/lib/registry
            - name: reg-auth
              mountPath: /auth
          livenessProbe:
            httpGet:
              path: /v2/_catalog
              port: {{ .Values.service.port }}
              scheme: HTTP
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.initContainer.username .Values.initContainer.password | b64enc }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /v2/_catalog
              port: {{ .Values.service.port }}
              scheme: HTTP
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.initContainer.username .Values.initContainer.password | b64enc }}
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: reg-auth
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: reg-data
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}